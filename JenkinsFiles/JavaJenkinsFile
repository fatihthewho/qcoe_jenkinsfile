def status = true
def infraError = true
try {
    node
            {
                stage('Master Setup') {
                    cleanWs()
                    def temp = getCurrentDirectory()
                    jutils = load "${temp}/src/helpers.groovy"
                    CURRENT_DIR_PATH = temp
                    jutils.initialize(params['CONFIG_FILE_ID'].trim())
                    echo "=========Master Setup Completed========="
                }
                stage('Grid Setup') {
                    jutils.setupGrid()
                    echo "===grid setup completed ========"
                }
                node("selenium") {
                    stage('Checkout Repo') {
                        jutils.checkoutRepo()
                        echo "===project repo checkout completed ========"
                        infraError = false
                    }
                    stage('Code Compile') {
                        jutils.compileMavenProject("${env.WORKSPACE}")
                        echo "===Code Compile completed ========"
                    }
                    try {
                        stage('Execute Tests') {
                            jutils.executeMavenTests(params.TEST_SUITE_FILE)
                            echo "===Test completed ========"
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "===Test completed With Error========"
                        status = false
                    }
                    try {
                        stage("Archive Artifacts") {
                            echo "=======Artifacts stage ===="
                            jutils.archiveJavaArtifacts()
                            echo "=======Artifacts stage completed ===="
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======Artifacts stage completed With Error===="
                        status = false
                    }
                    try {
                        stage('XRay') {
                            echo "=======XRay Stage ===="
                            echo "===Parsing NUit Results====="
                            jutils.parseTestNGTestResults("${PROJECT_LOCATION}target/surefire-reports/testng-results.xml")
                            jutils.updateXRayWithTestNG()
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======XRay stage completed With Error===="
                        status = false
                    }
                    try {
                        stage('Extract Variable from log') {
                                    steps {
                                        script {
                                            def logContent = Jenkins.getInstance().getItemByFullName(env.JOB_NAME).getBuildByNumber(Integer.parseInt(env.BUILD_NUMBER)).logFile.text
                                            env.testExecs = (logContent =~ /XRAY_TEST_EXECS:.*/).findAll().first()
                                            echo testExecs
                                        }
                                    }
                                }
                    }
                    catch (Exception e) {
                                            println(e)
                                            echo "=======Extract Variable from log===="
                                            status = false
                                        }
                    try {
                         stage('Using variable from another stage') {
                                    steps {
                                        script {
                                            echo "${env.testExecs}"
                                        }
                                    }
                                }
                    }
                    catch (Exception e) {
                                            println(e)
                                            echo "=======Using variable from another stage===="
                                            status = false
                                        }
                }
            }

} catch (Exception ex) {
    println(ex)
    echo "=======End completed With Error===="
    status = false
} finally {
    if (!status) {
        currentBuild.result = 'FAILURE'
    }
    node {
        stage('Cleanup') {
            try {
                echo "=======Shutdown AWS Instance===="
                jutils.shutdown()
            }
            catch (Exception e) {
                println(e)
                echo "=======Shutdown AWS Failed ===="
                currentBuild.result = 'FAILURE'
                infraError = true
            }

        }
        stage('Email') {
            try {
                echo "=======EMail Stage ===="
                jutils.sendEmail(infraError)
            }
            catch (Exception e) {
                println(e)
                echo "=======Sending Email Failed ===="
                currentBuild.result = 'FAILURE'
            }
        }
    }

    echo "===Done==="
}

def getCurrentDirectory() {
    def current = "${env.WORKSPACE}@script"
    def std = powershell returnStdout: true, script: """(Get-ChildItem -Path $current -Recurse -Filter "*tmp").FullName"""
    temp = std.trim().replace("\n", "")
    echo "modified:${temp}"
    def modified = temp.replace('@tmp', '').trim()
    if (modified.length() > 0) {
        return modified
    } else {
        return current
    }
}