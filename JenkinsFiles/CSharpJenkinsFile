def status = true

try {
    node
            {
                stage('Master Setup') {
                    cleanWs()
                    def temp = getCurrentDirectory()
                    jutils = load "${temp}/src/helpers.groovy"
                    autils = load "${temp}/src/aws.groovy"
                    CURRENT_DIR_PATH = temp
                    jutils.importJenkinsConfigFile(params.config_file_id)
                    echo "=========Master Setup Completed========="
                }
                stage('Start Grid') {
                    def vm = params.test_execution_vm
                    if(vm.equals('Select')){
                        throw new Exception("select test_execution_vm")
                    }
                    if(vm.equals('qcoe_selenium_grid')){

                    }
                    else{
                        def instanceId= autils.getInstanceID(vm)
                        autils.startAndWaitInstance()
                        jutils.setHubUrl(vm)
                    }
                }
                node("selenium") {
                    stage('Checkout Repo') {
                        jutils.checkoutRepo(REPO, BRANCH)
                        echo "===project repo ceckout completed ========"
                    }
                    stage('Code Compile') {
                        jutils.compileCSharp("${env.WORKSPACE}","${CSPROJ}")
                        echo "===Code Compile completed ========"
                    }
                    try {
                        stage('Execute Tests') {
                             jutils.executeNUnitTests(params.test_selection_criteria,params.environment, params.browser,params.use_selenium_grid, params.no_of_parallel_threads )
                            echo "===Test completed ========"
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "===Test completed With Error========"
                        status = false
                    }
                    try {
                    stage("Archive Artifacts") {
                        echo "===Parsing NUit Results====="
                        jutils.parseNUnitTestResults("${PROJECT_LOCATION}TestResult.xml")

                        echo "=======Artifacts stage ===="
                        jutils.archiveCSharpArtifacts()
                        echo "=======Artifacts stage completed ===="
                       }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======Artifacts stage completed With Error===="
                        status = false
                    }
                    try {
                        stage('XRay') {
                            echo "=======XRay Stage ===="
                            jutils.updateXRayWithNUnit(params.test_plan_key)
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======XRay stage completed With Error===="
                        status = false
                    }
                }
                try {
                    stage('Email') {
                        echo "=======EMail Stage ===="
                        jutils.sendEmail()
                    }
                }
                catch (Exception e) {
                    println(e)
                    echo "=======Email stage completed With Error===="
                    status = false
                }
            }

} catch (Exception ex) {
    println(ex)
    echo "=======End completed With Error===="
    status = false
} finally {
    if (!status) {
        currentBuild.result = 'FAILURE'
    }
    echo "===Done==="
}

def getCurrentDirectory() {
    def current = "${env.WORKSPACE}@script"
    def std = powershell returnStdout: true, script: """(Get-ChildItem -Path $current -Recurse -Filter "*tmp").FullName"""
    temp = std.trim().replace("\n", "")
    echo "modified:${temp}"

    def modified = temp.replace('@tmp', '').trim()
    if(modified.length()>0){
        return modified
    }
    else{
        return current
    }
}