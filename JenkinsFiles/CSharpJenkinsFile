def status = true
def infraError = true
try {
    node
            {
                stage('Master Setup') {
                    cleanWs()
                    def temp = getCurrentDirectory()
                    jutils = load "${temp}/src/helpers.groovy"
                    CURRENT_DIR_PATH = temp
                    jutils.initialize(params['Config File Id'])
                    echo "=========Master Setup Completed========="
                }
                stage('Grid Setup') {
                    jutils.setupGrid(params['Test_Execution_VM'])
                }
                node("selenium") {
                    stage('Checkout Repo') {
                        jutils.checkoutRepo(REPO, BRANCH)
                        echo "===project repo ceckout completed ========"
                        infraError =  false
                    }
                    stage('Code Compile') {
                        jutils.compileCSharp("${env.WORKSPACE}","${CSPROJ}")
                        echo "===Code Compile completed ========"
                    }
                    try {
                        stage('Execute Tests') {
                             jutils.executeNUnitTests(params['Environment'], params['Browser'], params['Number Of Parallel Threads'],params['Test Selection Criteria'])
                            echo "===Test completed ========"
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "===Test completed With Error========"
                        status = false
                    }
                    try {
                        stage("Archive Artifacts") {
                            echo "=======Artifacts stage ===="
                            jutils.archiveCSharpArtifacts()
                            echo "=======Artifacts stage completed ===="
                           }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======Artifacts stage completed With Error===="
                        status = false
                    }
                    try {
                        stage('XRay') {
                            echo "=======XRay Stage ===="
                            echo "===Parsing NUit Results====="
                            jutils.parseNUnitTestResults("${PROJECT_LOCATION}TestResult.xml")
                            jutils.updateXRayWithNUnit(params['Test Plan Key'])
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        echo "=======XRay stage completed With Error===="
                        status = false
                    }
                }
            }

} catch (Exception ex) {
    println(ex)
    echo "=======End completed With Error===="
    status = false
} finally {
    if (!status) {
        currentBuild.result = 'FAILURE'
    }
    node {
        stage('Cleanup') {
            try {
                echo "=======Shutdown AWS Instance===="
                jutils.shutdown(params['Test_Execution_VM']);
            }
            catch (Exception e){
                echo "=======Shutdown AWS Failed ===="
                currentBuild.result = 'FAILURE'
                infraError = true
            }

        }
        stage('Email') {
            try {
                echo "=======EMail Stage ===="
                jutils.sendEmail(infraError)
            }
            catch (Exception e){
                echo "=======Sending Email Failed ===="
                currentBuild.result = 'FAILURE'
            }
        }
    }

    echo "===Done==="
}

def getCurrentDirectory() {
    def current = "${env.WORKSPACE}@script"
    def std = powershell returnStdout: true, script: """(Get-ChildItem -Path $current -Recurse -Filter "*tmp").FullName"""
    temp = std.trim().replace("\n", "")
    echo "modified:${temp}"
    def modified = temp.replace('@tmp', '').trim()
    if(modified.length()>0){
        return modified
    }
    else{
        return current
    }
}