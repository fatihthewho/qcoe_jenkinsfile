def status = true

try {
    node
            {
                stage('Master Setup') {
                    cleanWs()
                    def temp = getCurrentDirectory()
                    jutils = load "${temp}/src/helpers.groovy"
                    CURRENT_DIR_PATH = temp
                }
                node("selenium") {
                    stage('Checkout Repo') {
                        echo "===checking out project repo  ==============="
                        jutils.checkoutRepo(params.repo_url, params.branch)
                    }
                    stage('Build') {
                         bat 'dotnet build'
                    }
                    try {
                        stage('Test') {
                             jutils.executeNUnitTests(params.no_of_parallel_threads, params.use_selenium_grid, params.browser, params.environment, params.test_selection_criteria)
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        status = false
                    }
                    try {
                    stage("Artifacts") {
                        try {
                            fileStream = readFileFromWorkspace filePath: "${env.WORKSPACE}/TestResult.xml"
                            def reader = new BufferedReader(new InputStreamReader(fileStream))
                            while ((line = reader.readLine()) != null) {
                                // Do something with the current line
                                println "Line read: ${line}"
                            }
                        } catch (err) {
                            error("Failed to read file ${filePath}: ${err}")
                        } finally {
                            fileStream?.close()
                        }
                       // jutils.parseNUnitTestResults(new File("${env.WORKSPACE}/TestResult.xml"))
                        echo "=======Artifacts stage ===="
                        jutils.archiveCSharpArtifacts()
                    }
                    }
                    catch (Exception e) {
                        println(e)
                        status = false
                    }
                    try {
                        stage('XRay') {
                            echo "=======XRay Stage ===="
                            jutils.updateXRayWithNUnit(params.test_plan_key)
                        }
                    }
                    catch (Exception e) {
                        println(e)
                        status = false
                    }
                }
                try {
                    stage('Email') {
                        echo "=======EMail Stage ===="
                        jutils.sendEmail(params.email_recipients)
                    }
                }
                catch (Exception e) {
                    println(e)
                    status = false
                }
            }

} catch (Exception ex) {
    println(ex)
    status = false
} finally {
    if (!status) {
        currentBuild.result = 'FAILURE'
    }
    echo "===Done==="
}

def getCurrentDirectory() {
    def temp = "${env.WORKSPACE}@script"
    def std = powershell returnStdout: true, script: """(Get-ChildItem -Path $temp -Recurse -Filter "*tmp").FullName"""
    temp = std.trim().replace("\n", "")
    echo "modified:${temp}"
    return temp.replace('@tmp', '')
}